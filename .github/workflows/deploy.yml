name: Prod-Deploy

on:
  release:
    types: [released]
    
jobs:
  generate_migrations:
    name: Generate Migration File 
    outputs:
      MIGRATION_FILE_PATH: ${{ steps.set_output.outputs.MIGRATION_FILE_PATH}}
      RELEASE_TAG: ${{ steps.set_output.outputs.RELEASE_TAG}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up output & env variables
        id: set_output
        run: | 
          echo "MIGRATION_FILE_PATH=migrations/migration-${{ github.event.release.tag_name }}.sql" >> $GITHUB_OUTPUT
          echo "MIGRATION_FILE_PATH=migrations/migration-${{ github.event.release.tag_name }}.sql" >> $GITHUB_ENV
          echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          
      - name: Generate Migration Script
        env:
          ASPNETCORE_ENVIRONMENT: Production
        run: |
          dotnet tool install --global dotnet-ef
          dotnet tool restore
          dotnet ef migrations script -o "${{ env.MIGRATION_FILE_PATH }}" -i -v --project NoteAPI --startup-project NoteAPI

      - name: Show Migration File Content
        run: |
          echo "Migration File Content:" \n
          cat "${{ env.MIGRATION_FILE_PATH }}"

      - name: Upload Migration Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-migration-${{ env.RELEASE_TAG }}
          path: ${{ env.MIGRATION_FILE_PATH }}
          compression-level: 0
          if-no-files-found: error
          retention-days: 1

  upload_to_bucket:
    name: Upload Migration File to Cloud Bucket
    runs-on: ubuntu-latest
    needs: generate_migrations
    environment: prod
    steps:
      - name: Download Migration Artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact-migration-${{ needs.generate_migrations.outputs.RELEASE_TAG }}
          path: migrations
          
      - name: Authenticate
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Upload
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: '${{ needs.generate_migrations.outputs.MIGRATION_FILE_PATH}}'
          destination: '${{ secrets.GCP_BUCKET_INSTANCE_NAME}}/migrations/'
          process_gcloudignore: false
          
      - name: Show Migration File Cloud Bucket URL
        run: |
          echo "File URL: https://console.cloud.google.com/storage/browser/_details/${{ secrets.GCP_BUCKET_INSTANCE_NAME}}/${{ needs.generate_migrations.outputs.MIGRATION_FILE_PATH }};tab=live_object"

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: [upload_to_bucket, generate_migrations]
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:${{ needs.generate_migrations.outputs.RELEASE_TAG }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:${{ needs.generate_migrations.outputs.RELEASE_TAG }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:${{ needs.generate_migrations.outputs.RELEASE_TAG }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:latest


  update_cloud_sql:
    runs-on: ubuntu-latest
    needs: [push_to_registry, generate_migrations]
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          
      - name: Set up Google Cloud CLI
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Update Cloud SQL Schema
        run: |
          gcloud sql import sql "${{ GCP_SQL_INSTANCE_NAME }}" "gs://${{ GCP_BUCKET_INSTANCE_NAME }}/${{ needs.generate_migrations.outputs.MIGRATION_FILE_PATH }}" --database=NoteApp
